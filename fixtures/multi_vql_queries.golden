{
  "000/000 Query with LET: LET X=SELECT * FROM test()": null,
  "000/001 Query with LET: SELECT * FROM X": [
    {
      "foo": 0,
      "bar": 0
    },
    {
      "foo": 2,
      "bar": 1
    },
    {
      "foo": 4,
      "bar": 2
    }
  ],
  "001/000 MultiSelect: SELECT 'Bar' AS Foo FROM scope()": [
    {
      "Foo": "Bar"
    }
  ],
  "001/001 MultiSelect: SELECT 'Foo' AS Foo FROM scope()": [
    {
      "Foo": "Foo"
    }
  ],
  "002/000 LET with index: LET X=SELECT * FROM test()": null,
  "002/001 LET with index: SELECT X[0], X[1].bar FROM scope()": [
    {
      "X[0]": {
        "foo": 0,
        "bar": 0
      },
      "X[1].bar": 1
    }
  ],
  "003/000 LET with extra columns: LET X=SELECT * FROM test()": null,
  "003/001 LET with extra columns: SELECT *, 1 FROM X": [
    {
      "foo": 0,
      "bar": 0,
      "1": 1
    },
    {
      "foo": 2,
      "bar": 1,
      "1": 1
    },
    {
      "foo": 4,
      "bar": 2,
      "1": 1
    }
  ],
  "004/000 LET materialized with extra columns: LET X\u003c=SELECT * FROM test()": null,
  "004/001 LET materialized with extra columns: SELECT *, 1 FROM X": [
    {
      "foo": 0,
      "bar": 0,
      "1": 1
    },
    {
      "foo": 2,
      "bar": 1,
      "1": 1
    },
    {
      "foo": 4,
      "bar": 2,
      "1": 1
    }
  ],
  "005/000 Column name with space: LET X\u003c=SELECT 2 AS `Hello World` FROM scope()": null,
  "005/001 Column name with space: SELECT `Hello World`, `Hello World` + 4 AS Foo, X.`Hello World` FROM X": [
    {
      "Hello World": 2,
      "Foo": 6,
      "X.`Hello World`": [
        2
      ]
    }
  ],
  "006/000 Group by with columns with spaces: LET X=SELECT foo, bar AS `Foo Bar` FROM groupbytest()": null,
  "006/001 Group by with columns with spaces: SELECT * FROM X GROUP BY `Foo Bar`": [
    {
      "foo": 2,
      "Foo Bar": 5
    },
    {
      "foo": 4,
      "Foo Bar": 2
    }
  ],
  "007/000 Order by with columns with spaces: LET X=SELECT foo AS `Foo Bar` FROM groupbytest()": null,
  "007/001 Order by with columns with spaces: SELECT * FROM X ORDER BY `Foo Bar` DESC ": [
    {
      "Foo Bar": 4
    },
    {
      "Foo Bar": 3
    },
    {
      "Foo Bar": 2
    },
    {
      "Foo Bar": 1
    }
  ],
  "008/000 LET with expression: LET X='Hello world'": null,
  "008/001 LET with expression: SELECT X FROM scope()": [
    {
      "X": "Hello world"
    }
  ],
  "009/000 LET with expression lazy: LET X=panic()": null,
  "009/001 LET with expression lazy: SELECT 1 + 1 FROM scope()": [
    {
      "1 + 1": 2
    }
  ],
  "010/000 LET materialize with expression: LET X\u003c='Hello world'": null,
  "010/001 LET materialize with expression: SELECT X FROM scope()": [
    {
      "X": "Hello world"
    }
  ],
  "011/000 Serialization (Unexpected arg aborts parsing): SELECT panic(value=1, column=1, colume='X'), func_foo() FROM scope()": [
    {
      "panic(value=1, column=1, colume='X')": null,
      "func_foo()": 1
    }
  ],
  "012/000 LET with expression lazy - string concat: LET X='hello'": null,
  "012/001 LET with expression lazy - string concat: SELECT X + 'world', 'world' + X, 'hello world' =~ X FROM scope()": [
    {
      "X + 'world'": "helloworld",
      "'world' + X": "worldhello",
      "'hello world' =~ X": true
    }
  ],
  "013/000 Lazy expression in arrays: LET X=count()": null,
  "013/001 Lazy expression in arrays: SELECT (1, X), dict(foo=X, bar= [1, X]) FROM scope()": [
    {
      "(1, X)": [
        1,
        1
      ],
      "dict(foo=X, bar= [1, X])": {
        "foo": 3,
        "bar": [
          1,
          2
        ]
      }
    }
  ],
  "014/000 Calling stored queries as plugins: LET X=SELECT Foo FROM scope()": null,
  "014/001 Calling stored queries as plugins: SELECT * FROM X(Foo=1)": [
    {
      "Foo": 1
    }
  ],
  "015/000 Defining functions with args: LET X(Foo,Bar)=Foo + Bar": null,
  "015/001 Defining functions with args: SELECT X(Foo=5, Bar=2) FROM scope()": [
    {
      "X(Foo=5, Bar=2)": 7
    }
  ],
  "016/000 Defining stored queries with args: LET X(Foo,Bar)=SELECT Foo + Bar FROM scope()": null,
  "016/001 Defining stored queries with args: SELECT * FROM X(Foo=5, Bar=2)": [
    {
      "Foo + Bar": 7
    }
  ],
  "017/000 Defining functions masking variable name: LET X(foo)=foo + 2": null,
  "017/001 Defining functions masking variable name: SELECT X(foo=foo), foo FROM test()": [
    {
      "X(foo=foo)": 2,
      "foo": 0
    },
    {
      "X(foo=foo)": 4,
      "foo": 2
    },
    {
      "X(foo=foo)": 6,
      "foo": 4
    }
  ],
  "018/000 Defining stored queries masking variable name: LET X(foo)=SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "018/001 Defining stored queries masking variable name: LET foo=2": null,
  "018/002 Defining stored queries masking variable name: SELECT * FROM X(foo=foo)": [
    {
      "value": 2,
      "foo": 2
    },
    {
      "value": 3,
      "foo": 2
    },
    {
      "value": 4,
      "foo": 2
    }
  ],
  "019/000 Calling stored query in function context: LET X(foo)=SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "019/001 Calling stored query in function context: SELECT X(foo=5).value, X(foo=10) FROM scope()": [
    {
      "X(foo=5).value": [
        5,
        6,
        7
      ],
      "X(foo=10)": [
        {
          "value": 10,
          "foo": 10
        },
        {
          "value": 11,
          "foo": 10
        },
        {
          "value": 12,
          "foo": 10
        }
      ]
    }
  ],
  "020/000 Calling stored query with args: LET X(foo)=SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "020/001 Calling stored query with args: LET foo=8": null,
  "020/002 Calling stored query with args: SELECT * FROM foreach(row=X, query= { SELECT *, value FROM X(foo=value)})": [
    {
      "foo": 8,
      "value": 8
    },
    {
      "foo": 8,
      "value": 9
    },
    {
      "foo": 8,
      "value": 10
    },
    {
      "foo": 9,
      "value": 9
    },
    {
      "foo": 9,
      "value": 10
    },
    {
      "foo": 9,
      "value": 11
    },
    {
      "foo": 10,
      "value": 10
    },
    {
      "foo": 10,
      "value": 11
    },
    {
      "foo": 10,
      "value": 12
    }
  ],
  "021/000 Lazy expression evaluates in caller's scope: LET X(foo)=1 + foo": null,
  "021/001 Lazy expression evaluates in caller's scope: SELECT X(foo=foo + 1), foo FROM test()": [
    {
      "X(foo=foo + 1)": 2,
      "foo": 0
    },
    {
      "X(foo=foo + 1)": 4,
      "foo": 2
    },
    {
      "X(foo=foo + 1)": 6,
      "foo": 4
    }
  ],
  "022/000 Calling lazy expressions as functions allows access to global scope: LET Xk=5": null,
  "022/001 Calling lazy expressions as functions allows access to global scope: LET Y=Xk + count()": null,
  "022/002 Calling lazy expressions as functions allows access to global scope: SELECT Y AS Y1, Y AS Y2, Y() AS Y3 FROM scope()": [
    {
      "Y1": 6,
      "Y2": 7,
      "Y3": 8
    }
  ],
  "023/000 Overflow condition - should not get stuck: LET X=1 + X": null,
  "023/001 Overflow condition - should not get stuck: SELECT X(X=1), X FROM test()": [
    {
      "X(X=1)": 2,
      "X": null
    },
    {
      "X(X=1)": 2,
      "X": null
    },
    {
      "X(X=1)": 2,
      "X": null
    }
  ],
  "024/000 Overflow condition - should not get stuck: LET X=1 + X": null,
  "024/001 Overflow condition - should not get stuck: LET Y=1 + Y": null,
  "024/002 Overflow condition - should not get stuck: SELECT X, Y FROM scope()": [
    {
      "X": null,
      "Y": null
    }
  ],
  "025/000 Overflow condition materialized - should not get stuck: LET X\u003c=1 + X": null,
  "025/001 Overflow condition materialized - should not get stuck: LET Y=1 + Y": null,
  "025/002 Overflow condition materialized - should not get stuck: SELECT X, Y FROM scope()": [
    {
      "X": null,
      "Y": null
    }
  ],
  "026/000 Overflow with plugins: LET foo_plugin(X)=SELECT * FROM chain(a= { SELECT * FROM foo_plugin(X=1)})": null,
  "026/001 Overflow with plugins: SELECT * FROM foo_plugin(X=1)": null,
  "027/000 Escaped identifiers for arg parameters: SELECT dict(`arg-with-special chars`=TRUE) FROM scope()": [
    {
      "dict(`arg-with-special chars`=TRUE)": {
        "arg-with-special chars": true
      }
    }
  ],
  "028/000 Group by hidden column: SELECT bar, baz FROM groupbytest() GROUP BY bar": [
    {
      "bar": 5,
      "baz": "b"
    },
    {
      "bar": 2,
      "baz": "d"
    }
  ],
  "028/001 Group by hidden column: SELECT baz FROM groupbytest() GROUP BY bar": [
    {
      "baz": "b"
    },
    {
      "baz": "d"
    }
  ],
  "029/000 Group by expression: SELECT *, bar + bar FROM groupbytest() GROUP BY bar + bar": [
    {
      "foo": 2,
      "bar": 5,
      "baz": "b",
      "bar + bar": 10
    },
    {
      "foo": 4,
      "bar": 2,
      "baz": "d",
      "bar + bar": 4
    }
  ],
  "030/000 Variable can not mask a function.: LET dict(x)=1": null,
  "030/001 Variable can not mask a function.: SELECT 1 AS dict, dict(foo=1) FROM scope() WHERE dict": [
    {
      "dict": 1,
      "dict(foo=1)": {
        "foo": 1
      }
    }
  ],
  "031/000 Foreach evals query in row scope (both queries should be same): LET row_query=SELECT 1 AS ColumnName123 FROM scope()": null,
  "031/001 Foreach evals query in row scope (both queries should be same): LET foreach_query=SELECT ColumnName123 FROM scope()": null,
  "031/002 Foreach evals query in row scope (both queries should be same): SELECT * FROM foreach(row=row_query, query=foreach_query)": [
    {
      "ColumnName123": 1
    }
  ],
  "031/003 Foreach evals query in row scope (both queries should be same): SELECT * FROM foreach(row=row_query, query= { SELECT ColumnName123 FROM scope()})": [
    {
      "ColumnName123": 1
    }
  ],
  "032/000 Aggregate functions with multiple evaluations: SELECT count() AS Count FROM foreach(row= [0, 1, 2]) WHERE Count \u003c= 2 AND Count AND Count AND Count AND count() and count()": [
    {
      "Count": 1
    },
    {
      "Count": 2
    }
  ],
  "033/000 Aggregate functions: min max: SELECT min(item=_value) AS Min, max(item=_value) AS Max, count() AS Count FROM foreach(row= [0, 1, 2]) GROUP BY 1": [
    {
      "Min": 0,
      "Max": 2,
      "Count": 3
    }
  ],
  "034/000 Aggregate functions: min max on strings: SELECT min(item=_value) AS Min, max(item=_value) AS Max, count() AS Count FROM foreach(row= [\"AAA\", \"BBBB\", \"CCC\"]) GROUP BY 1": [
    {
      "Min": "AAA",
      "Max": "CCC",
      "Count": 3
    }
  ],
  "035/000 Aggregate functions keep state per unique instance: SELECT count() AS A, count() AS B FROM foreach(row= [0, 1, 2])": [
    {
      "A": 1,
      "B": 1
    },
    {
      "A": 2,
      "B": 2
    },
    {
      "A": 3,
      "B": 3
    }
  ],
  "036/000 Aggregate functions within a VQL function have their own state: LET Adder(X)=SELECT *, count() AS Count FROM range(start=10, end=10 + X, step=1)": null,
  "036/001 Aggregate functions within a VQL function have their own state: SELECT Adder(X=4), Adder(X=2) FROM scope()": [
    {
      "Adder(X=4)": [
        {
          "value": 10,
          "Count": 1
        },
        {
          "value": 11,
          "Count": 2
        },
        {
          "value": 12,
          "Count": 3
        },
        {
          "value": 13,
          "Count": 4
        },
        {
          "value": 14,
          "Count": 5
        }
      ],
      "Adder(X=2)": [
        {
          "value": 10,
          "Count": 1
        },
        {
          "value": 11,
          "Count": 2
        },
        {
          "value": 12,
          "Count": 3
        }
      ]
    }
  ],
  "037/000 Aggregate functions: Sum and Count together: SELECT * FROM foreach(row= [2, 3, 4], query= { SELECT count() AS A, sum(item=_value) AS B FROM scope()})": [
    {
      "A": 1,
      "B": 2
    },
    {
      "A": 1,
      "B": 3
    },
    {
      "A": 1,
      "B": 4
    }
  ],
  "038/000 Aggregate functions: Sum all rows: SELECT sum(item=_value) AS Total, sum(item=_value * 2) AS TotalDouble FROM foreach(row= [2, 3, 4]) GROUP BY 1": [
    {
      "Total": 9,
      "TotalDouble": 18
    }
  ],
  "039/000 If function with stored query: LET Foo=SELECT 2 FROM scope() WHERE set_env(column=\"Eval\", value=TRUE)": null,
  "039/001 If function with stored query: LET result\u003c=if(condition=TRUE, then=Foo)": null,
  "039/002 If function with stored query: SELECT RootEnv.Eval AS Pass FROM scope()": [
    {
      "Pass": true
    }
  ],
  "040/000 If function with subqueries: LET abc(a)=if(condition=a, then= { SELECT a AS Pass FROM scope()}, else= { SELECT false AS Pass FROM scope()})": null,
  "040/001 If function with subqueries: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": true
        }
      ]
    }
  ],
  "041/000 If function with functions: LET abc(a)=if(condition=a, then=set_env(column=\"EvalFunc\", value=TRUE))": null,
  "041/001 If function with functions: LET _\u003c=SELECT abc(a=TRUE) FROM scope()": null,
  "041/002 If function with functions: SELECT RootEnv.EvalFunc AS Pass FROM scope()": [
    {
      "Pass": true
    }
  ],
  "042/000 If function with conditions as subqueries: LET abc(a)=if(condition= { SELECT * FROM scope()}, then= { SELECT a AS Pass FROM scope()}, else= { SELECT false AS Pass FROM scope()})": null,
  "042/001 If function with conditions as subqueries: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": true
        }
      ]
    }
  ],
  "043/000 If function with conditions as stored query: LET stored_query=SELECT * FROM scope()": null,
  "043/001 If function with conditions as stored query: LET abc(a)=if(condition=stored_query, then= { SELECT a AS Pass FROM scope()}, else= { SELECT false AS Pass FROM scope()})": null,
  "043/002 If function with conditions as stored query: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": true
        }
      ]
    }
  ],
  "044/000 If function with conditions as vql functions: LET adder(a)=a =~ \"Foo\"": null,
  "044/001 If function with conditions as vql functions: LET abc(a)=if(condition=adder(a=\"Foobar\"), then= { SELECT a AS Pass FROM scope()}, else= { SELECT false AS Pass FROM scope()})": null,
  "044/002 If function with conditions as vql functions: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": true
        }
      ]
    }
  ],
  "045/000 Multiline string constants: LET X='''This\nis\na\nmultiline with 'quotes' and \"double quotes\" and \\ backslashes\n''' + \"A string\"": null,
  "045/001 Multiline string constants: SELECT X FROM scope()": [
    {
      "X": "This\nis\na\nmultiline with 'quotes' and \"double quotes\" and \\ backslashes\nA string"
    }
  ],
  "046/000 Early breakout of foreach with infinite row query: SELECT * FROM foreach(row= { SELECT count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=5)}, query= { SELECT Count FROM scope()}) LIMIT 1 ": [
    {
      "Count": 1
    }
  ],
  "047/000 Early breakout of foreach with stored query: LET X=SELECT count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=5)": null,
  "047/001 Early breakout of foreach with stored query: SELECT * FROM foreach(row=X, query= { SELECT Count FROM scope()}) LIMIT 1 ": [
    {
      "Count": 1
    }
  ],
  "048/000 Early breakout of foreach with stored query with parameters: LET X(Y)=SELECT Y, count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=5)": null,
  "048/001 Early breakout of foreach with stored query with parameters: SELECT * FROM foreach(row=X(Y=23), query= { SELECT Y, Count FROM scope()}) LIMIT 1 ": [
    {
      "Y": 23,
      "Count": 1
    }
  ],
  "049/000 Expand stored query with parameters on associative: LET X(Y)=SELECT Y + 5 + value AS Foo FROM range(start=1, end=2)": null,
  "049/001 Expand stored query with parameters on associative: SELECT X(Y=2).Foo FROM scope()": [
    {
      "X(Y=2).Foo": [
        8,
        9
      ]
    }
  ],
  "050/000 Order by: SELECT * FROM foreach(row=(1, 8, 3, 2), query= { SELECT _value AS X FROM scope()}) ORDER BY X": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    },
    {
      "X": 8
    }
  ],
  "051/000 Group by also orders: SELECT * FROM foreach(row=(1, 1, 1, 1, 8, 3, 3, 3, 2), query= { SELECT _value AS X FROM scope()}) GROUP BY X": [
    {
      "X": 1
    },
    {
      "X": 8
    },
    {
      "X": 3
    },
    {
      "X": 2
    }
  ],
  "052/000 Group by with explicit order by: SELECT * FROM foreach(row=(1, 1, 1, 1, 8, 3, 3, 3, 2), query= { SELECT _value AS X, 10 - _value AS Y FROM scope()}) GROUP BY X ORDER BY Y": [
    {
      "X": 8,
      "Y": 2
    },
    {
      "X": 3,
      "Y": 7
    },
    {
      "X": 2,
      "Y": 8
    },
    {
      "X": 1,
      "Y": 9
    }
  ],
  "053/000 Test array index: LET BIN\u003c=SELECT * FROM test()": null,
  "053/001 Test array index: SELECT BIN, BIN[0] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[0]": {
        "foo": 0,
        "bar": 0
      }
    }
  ],
  "054/000 Test array index with expression: LET Index(X)=X - 1": null,
  "054/001 Test array index with expression: LET BIN\u003c=SELECT * FROM test()": null,
  "054/002 Test array index with expression: SELECT BIN, BIN[Index(X=2)] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[Index(X=2)]": {
        "foo": 2,
        "bar": 1
      }
    }
  ],
  "054/003 Test array index with expression: SELECT BIN, BIN[Index(X=0)] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[Index(X=0)]": {
        "foo": 4,
        "bar": 2
      }
    }
  ],
  "055/000 Create Let expression: LET result=SELECT * FROM test()": null,
  "055/001 Create Let expression: LET result\u003c=SELECT * FROM test()": null,
  "055/002 Create Let expression: SELECT * FROM result": [
    {
      "foo": 0,
      "bar": 0
    },
    {
      "foo": 2,
      "bar": 1
    },
    {
      "foo": 4,
      "bar": 2
    }
  ],
  "055/003 Create Let expression: SELECT * FROM no_such_result": null,
  "055/004 Create Let expression: SELECT foobar FROM no_such_result": null,
  "056/000 Override function with a variable: LET format=5": null,
  "056/001 Override function with a variable: SELECT format, format(format='%v', args=1) AS A FROM scope()": [
    {
      "format": 5,
      "A": "1"
    }
  ],
  "057/000 Stored Expressions as plugins: LET Foo=(dict(X=1), dict(X=2), dict(X=3))": null,
  "057/001 Stored Expressions as plugins: SELECT * FROM Foo": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    }
  ],
  "058/000 Materialized Expressions as plugins: LET Foo\u003c=(dict(X=1), dict(X=2), dict(X=3))": null,
  "058/001 Materialized Expressions as plugins: SELECT * FROM Foo": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    }
  ],
  "059/000 Stored Expressions as plugins with args: LET Foo(X)=(dict(X=1 + X), dict(X=2 + X), dict(X=3 + X))": null,
  "059/001 Stored Expressions as plugins with args: SELECT * FROM Foo(X=1)": [
    {
      "X": 2
    },
    {
      "X": 3
    },
    {
      "X": 4
    }
  ],
  "060/000 Slice Range: LET X\u003c=(0, 1, 2, 3, 4, 5, 6, 7)": null,
  "060/001 Slice Range: SELECT X[2 : ], X[2 : 4], X[ : 2], X[-1], X[-2], X[-2 : ], X[2 : -1] FROM scope()": [
    {
      "X[2 : ]": [
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "X[2 : 4]": [
        2,
        3
      ],
      "X[ : 2]": [
        0,
        1
      ],
      "X[-1]": 7,
      "X[-2]": 6,
      "X[-2 : ]": [
        6,
        7
      ],
      "X[2 : -1]": [
        2,
        3,
        4,
        5,
        6
      ]
    }
  ],
  "061/000 Access object methods as properties.: LET _\u003c=SELECT * FROM reset_objectwithmethods()": null,
  "061/001 Access object methods as properties.: SELECT * FROM objectwithmethods()": [
    {
      "Value1": 1,
      "Value2": "I am a method, called 1"
    },
    {
      "Value1": 2,
      "Value2": "I am a method, called 2"
    }
  ],
  "061/002 Access object methods as properties.: SELECT Value1, Value2 + \"X\" FROM objectwithmethods()": [
    {
      "Value1": 1,
      "Value2 + \"X\"": "I am a method, called 3X"
    },
    {
      "Value1": 2,
      "Value2 + \"X\"": "I am a method, called 4X"
    }
  ],
  "061/003 Access object methods as properties.: SELECT Value1 FROM objectwithmethods()": [
    {
      "Value1": 1
    },
    {
      "Value1": 2
    }
  ],
  "061/004 Access object methods as properties.: SELECT Value2 + \"X\" FROM objectwithmethods() WHERE False": null,
  "061/005 Access object methods as properties.: SELECT if(condition=1, then=2, else=Value2) FROM objectwithmethods()": [
    {
      "if(condition=1, then=2, else=Value2)": 2
    },
    {
      "if(condition=1, then=2, else=Value2)": 2
    }
  ],
  "061/006 Access object methods as properties.: SELECT Value2 FROM objectwithmethods() WHERE Value2 =~ \"method\"": [
    {
      "Value2": "I am a method, called 5"
    },
    {
      "Value2": "I am a method, called 6"
    }
  ],
  "062/000 Access object methods as properties: LET _\u003c=SELECT * FROM reset_objectwithmethods()": null,
  "062/001 Access object methods as properties: SELECT VarIsObjectWithMethods.Value1 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value1": 1
    }
  ],
  "062/002 Access object methods as properties: SELECT VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value2": "I am a method, called 1"
    }
  ],
  "062/003 Access object methods as properties: SELECT VarIsObjectWithMethods.Value1 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value1": 1
    }
  ],
  "062/004 Access object methods as properties: SELECT if(condition=1, then=2, else=VarIsObjectWithMethods.Value2) FROM scope()": [
    {
      "if(condition=1, then=2, else=VarIsObjectWithMethods.Value2)": 2
    }
  ],
  "062/005 Access object methods as properties: SELECT VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value2": "I am a method, called 2"
    }
  ],
  "062/006 Access object methods as properties: SELECT if(condition=FALSE, then=2, else=VarIsObjectWithMethods.Value2) + \"X\", VarIsObjectWithMethods.Value2 =~ \"I am a method\", VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "if(condition=FALSE, then=2, else=VarIsObjectWithMethods.Value2) + \"X\"": "I am a method, called 3X",
      "VarIsObjectWithMethods.Value2 =~ \"I am a method\"": true,
      "VarIsObjectWithMethods.Value2": "I am a method, called 5"
    }
  ]
}