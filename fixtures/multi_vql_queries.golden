{
  "000/000 Query with LET: LET X = SELECT * FROM test()": null,
  "000/001 Query with LET: SELECT * FROM X": [
    {
      "foo": 0,
      "bar": 0
    },
    {
      "foo": 2,
      "bar": 1
    },
    {
      "foo": 4,
      "bar": 2
    }
  ],
  "001/000 MultiSelect: SELECT 'Bar' AS Foo FROM scope()": [
    {
      "Foo": "Bar"
    }
  ],
  "001/001 MultiSelect: SELECT 'Foo' AS Foo FROM scope()": [
    {
      "Foo": "Foo"
    }
  ],
  "002/000 LET with index: LET X = SELECT * FROM test()": null,
  "002/001 LET with index: SELECT X[0], X[1].bar FROM scope()": [
    {
      "X[0]": {
        "foo": 0,
        "bar": 0
      },
      "X[1].bar": 1
    }
  ],
  "003/000 LET with extra columns: LET X = SELECT * FROM test()": null,
  "003/001 LET with extra columns: SELECT *, 1 FROM X": [
    {
      "foo": 0,
      "bar": 0,
      "1": 1
    },
    {
      "foo": 2,
      "bar": 1,
      "1": 1
    },
    {
      "foo": 4,
      "bar": 2,
      "1": 1
    }
  ],
  "004/000 LET with extra columns before *: LET X = SELECT * FROM test()": null,
  "004/001 LET with extra columns before *: SELECT 1, *, 2 FROM X": [
    {
      "1": 1,
      "foo": 0,
      "bar": 0,
      "2": 2
    },
    {
      "1": 1,
      "foo": 2,
      "bar": 1,
      "2": 2
    },
    {
      "1": 1,
      "foo": 4,
      "bar": 2,
      "2": 2
    }
  ],
  "005/000 LET with extra columns before * and override: LET X = SELECT * FROM test()": null,
  "005/001 LET with extra columns before * and override: SELECT 1000 + foo AS foo, *, 2 FROM X": [
    {
      "foo": 1000,
      "bar": 0,
      "2": 2
    },
    {
      "foo": 1002,
      "bar": 1,
      "2": 2
    },
    {
      "foo": 1004,
      "bar": 2,
      "2": 2
    }
  ],
  "006/000 LET materialized with extra columns: LET X \u003c= SELECT * FROM test()": null,
  "006/001 LET materialized with extra columns: SELECT *, 1 FROM X": [
    {
      "foo": 0,
      "bar": 0,
      "1": 1
    },
    {
      "foo": 2,
      "bar": 1,
      "1": 1
    },
    {
      "foo": 4,
      "bar": 2,
      "1": 1
    }
  ],
  "007/000 Column name with space: LET X \u003c= SELECT 2 AS `Hello World` FROM scope()": null,
  "007/001 Column name with space: SELECT `Hello World`, `Hello World` + 4 AS Foo, X.`Hello World` FROM X": [
    {
      "Hello World": 2,
      "Foo": 6,
      "X.`Hello World`": [
        2
      ]
    }
  ],
  "008/000 Group by with columns with spaces: LET X = SELECT foo, bar AS `Foo Bar` FROM groupbytest()": null,
  "008/001 Group by with columns with spaces: SELECT * FROM X GROUP BY `Foo Bar`": [
    {
      "foo": 2,
      "Foo Bar": 5
    },
    {
      "foo": 4,
      "Foo Bar": 2
    }
  ],
  "009/000 Order by with columns with spaces: LET X = SELECT foo AS `Foo Bar` FROM groupbytest()": null,
  "009/001 Order by with columns with spaces: SELECT * FROM X ORDER BY `Foo Bar` DESC ": [
    {
      "Foo Bar": 4
    },
    {
      "Foo Bar": 3
    },
    {
      "Foo Bar": 2
    },
    {
      "Foo Bar": 1
    }
  ],
  "010/000 LET with expression: LET X = 'Hello world'": null,
  "010/001 LET with expression: SELECT X FROM scope()": [
    {
      "X": "Hello world"
    }
  ],
  "011/000 LET with expression lazy: LET X = panic()": null,
  "011/001 LET with expression lazy: SELECT 1 + 1 FROM scope()": [
    {
      "1 + 1": 2
    }
  ],
  "012/000 LET materialize with expression: LET X \u003c= 'Hello world'": null,
  "012/001 LET materialize with expression: SELECT X FROM scope()": [
    {
      "X": "Hello world"
    }
  ],
  "013/000 Serialization (Unexpected arg aborts parsing): SELECT panic(value=1, column=1, colume='X'), func_foo() FROM scope()": [
    {
      "panic(value=1, column=1, colume='X')": null,
      "func_foo()": 1
    }
  ],
  "014/000 LET with expression lazy - string concat: LET X = 'hello'": null,
  "014/001 LET with expression lazy - string concat: SELECT X + 'world', 'world' + X, 'hello world' =~ X FROM scope()": [
    {
      "X + 'world'": "helloworld",
      "'world' + X": "worldhello",
      "'hello world' =~ X": true
    }
  ],
  "015/000 Lazy expression in arrays: LET X = count()": null,
  "015/001 Lazy expression in arrays: SELECT (1, X), dict(foo=X, bar=[1, X]) FROM scope()": [
    {
      "(1, X)": [
        1,
        1
      ],
      "dict(foo=X, bar=[1, X])": {
        "foo": 3,
        "bar": [
          1,
          2
        ]
      }
    }
  ],
  "016/000 Calling stored queries as plugins: LET X = SELECT Foo FROM scope()": null,
  "016/001 Calling stored queries as plugins: SELECT * FROM X(Foo=1)": [
    {
      "Foo": 1
    }
  ],
  "017/000 Defining functions with args: LET X(Foo, Bar) = Foo + Bar": null,
  "017/001 Defining functions with args: SELECT X(Foo=5, Bar=2) FROM scope()": [
    {
      "X(Foo=5, Bar=2)": 7
    }
  ],
  "018/000 Defining stored queries with args: LET X(Foo, Bar) = SELECT Foo + Bar FROM scope()": null,
  "018/001 Defining stored queries with args: SELECT * FROM X(Foo=5, Bar=2)": [
    {
      "Foo + Bar": 7
    }
  ],
  "019/000 Defining functions masking variable name: LET X(foo) = foo + 2": null,
  "019/001 Defining functions masking variable name: SELECT X(foo=foo), foo FROM test()": [
    {
      "X(foo=foo)": 2,
      "foo": 0
    },
    {
      "X(foo=foo)": 4,
      "foo": 2
    },
    {
      "X(foo=foo)": 6,
      "foo": 4
    }
  ],
  "020/000 Defining stored queries masking variable name: LET X(foo) = SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "020/001 Defining stored queries masking variable name: LET foo = 2": null,
  "020/002 Defining stored queries masking variable name: SELECT * FROM X(foo=foo)": [
    {
      "value": 2,
      "foo": 2
    },
    {
      "value": 3,
      "foo": 2
    },
    {
      "value": 4,
      "foo": 2
    }
  ],
  "021/000 Calling stored query in function context: LET X(foo) = SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "021/001 Calling stored query in function context: SELECT X(foo=5).value, X(foo=10) FROM scope()": [
    {
      "X(foo=5).value": [
        5,
        6,
        7
      ],
      "X(foo=10)": [
        {
          "value": 10,
          "foo": 10
        },
        {
          "value": 11,
          "foo": 10
        },
        {
          "value": 12,
          "foo": 10
        }
      ]
    }
  ],
  "022/000 Calling stored query with args: LET X(foo) = SELECT *, foo FROM range(start=foo, end=foo + 2)": null,
  "022/001 Calling stored query with args: LET foo = 8": null,
  "022/002 Calling stored query with args: SELECT * FROM foreach(row=X, query={ SELECT *, value FROM X(foo=value) })": [
    {
      "foo": 8,
      "value": 8
    },
    {
      "foo": 8,
      "value": 9
    },
    {
      "foo": 8,
      "value": 10
    },
    {
      "foo": 9,
      "value": 9
    },
    {
      "foo": 9,
      "value": 10
    },
    {
      "foo": 9,
      "value": 11
    },
    {
      "foo": 10,
      "value": 10
    },
    {
      "foo": 10,
      "value": 11
    },
    {
      "foo": 10,
      "value": 12
    }
  ],
  "023/000 Lazy expression evaluates in caller's scope: LET X(foo) = 1 + foo": null,
  "023/001 Lazy expression evaluates in caller's scope: SELECT X(foo=foo + 1), foo FROM test()": [
    {
      "X(foo=foo + 1)": 2,
      "foo": 0
    },
    {
      "X(foo=foo + 1)": 4,
      "foo": 2
    },
    {
      "X(foo=foo + 1)": 6,
      "foo": 4
    }
  ],
  "024/000 Calling lazy expressions as functions allows access to global scope: LET Xk = 5": null,
  "024/001 Calling lazy expressions as functions allows access to global scope: LET Y = Xk + count()": null,
  "024/002 Calling lazy expressions as functions allows access to global scope: SELECT Y AS Y1, Y AS Y2, Y() AS Y3 FROM scope()": [
    {
      "Y1": 6,
      "Y2": 7,
      "Y3": 8
    }
  ],
  "025/000 Overflow condition - should not get stuck: LET X = 1 + X": null,
  "025/001 Overflow condition - should not get stuck: SELECT X(X=1), X FROM test()": [
    {
      "X(X=1)": 2,
      "X": null
    },
    {
      "X(X=1)": 2,
      "X": null
    },
    {
      "X(X=1)": 2,
      "X": null
    }
  ],
  "026/000 Overflow condition - https://github.com/Velocidex/velociraptor/issues/2845: LET X = X.ID": null,
  "026/001 Overflow condition - https://github.com/Velocidex/velociraptor/issues/2845: SELECT * FROM X": [
    {}
  ],
  "027/000 Overflow condition - should not get stuck: LET X = 1 + X": null,
  "027/001 Overflow condition - should not get stuck: LET Y = 1 + Y": null,
  "027/002 Overflow condition - should not get stuck: SELECT X, Y FROM scope()": [
    {
      "X": null,
      "Y": null
    }
  ],
  "028/000 Overflow condition materialized - should not get stuck: LET X \u003c= 1 + X": null,
  "028/001 Overflow condition materialized - should not get stuck: LET Y = 1 + Y": null,
  "028/002 Overflow condition materialized - should not get stuck: SELECT X, Y FROM scope()": [
    {
      "X": null,
      "Y": null
    }
  ],
  "029/000 Overflow with plugins: LET foo_plugin(X) = SELECT * FROM chain(a={ SELECT * FROM foo_plugin(X=1) })": null,
  "029/001 Overflow with plugins: SELECT * FROM foo_plugin(X=1)": null,
  "030/000 Escaped identifiers for arg parameters: SELECT dict(`arg-with-special chars`=TRUE) FROM scope()": [
    {
      "dict(`arg-with-special chars`=TRUE)": {
        "arg-with-special chars": true
      }
    }
  ],
  "031/000 Group by hidden column: SELECT bar, baz FROM groupbytest() GROUP BY bar": [
    {
      "bar": 5,
      "baz": "b"
    },
    {
      "bar": 2,
      "baz": "d"
    }
  ],
  "031/001 Group by hidden column: SELECT baz FROM groupbytest() GROUP BY bar": [
    {
      "baz": "b"
    },
    {
      "baz": "d"
    }
  ],
  "032/000 Group by expression: SELECT *, bar + bar FROM groupbytest() GROUP BY bar + bar": [
    {
      "foo": 2,
      "bar": 5,
      "baz": "b",
      "bar + bar": 10
    },
    {
      "foo": 4,
      "bar": 2,
      "baz": "d",
      "bar + bar": 4
    }
  ],
  "033/000 Variable can not mask a function.: LET dict(x) = 1": null,
  "033/001 Variable can not mask a function.: SELECT 1 AS dict, dict(foo=1) FROM scope() WHERE dict": [
    {
      "dict": 1,
      "dict(foo=1)": {
        "foo": 1
      }
    }
  ],
  "034/000 Foreach evals query in row scope (both queries should be same): LET row_query = SELECT 1 AS ColumnName123 FROM scope()": null,
  "034/001 Foreach evals query in row scope (both queries should be same): LET foreach_query = SELECT ColumnName123 FROM scope()": null,
  "034/002 Foreach evals query in row scope (both queries should be same): SELECT * FROM foreach(row=row_query, query=foreach_query)": [
    {
      "ColumnName123": 1
    }
  ],
  "034/003 Foreach evals query in row scope (both queries should be same): SELECT * FROM foreach(row=row_query, query={ SELECT ColumnName123 FROM scope() })": [
    {
      "ColumnName123": 1
    }
  ],
  "035/000 Aggregate functions with multiple evaluations: SELECT count() AS Count FROM foreach(row=[0, 1, 2]) WHERE Count \u003c= 2  AND Count  AND Count  AND Count  AND count()  and count()": [
    {
      "Count": 1
    },
    {
      "Count": 2
    }
  ],
  "036/000 Aggregate functions: min max: SELECT min(item=_value) AS Min, max(item=_value) AS Max, count() AS Count FROM foreach(row=[0, 1, 2]) GROUP BY 1": [
    {
      "Min": 0,
      "Max": 2,
      "Count": 3
    }
  ],
  "037/000 Aggregate functions: min max on strings: SELECT min(item=_value) AS Min, max(item=_value) AS Max, count() AS Count FROM foreach(row=[\"AAA\", \"BBBB\", \"CCC\"]) GROUP BY 1": [
    {
      "Min": "AAA",
      "Max": "CCC",
      "Count": 3
    }
  ],
  "038/000 Aggregate functions keep state per unique instance: SELECT count() AS A, count() AS B FROM foreach(row=[0, 1, 2])": [
    {
      "A": 1,
      "B": 1
    },
    {
      "A": 2,
      "B": 2
    },
    {
      "A": 3,
      "B": 3
    }
  ],
  "039/000 Aggregate functions within a VQL function have their own state: LET Adder(X) = SELECT *, count() AS Count FROM range(start=10, end=10 + X, step=1)": null,
  "039/001 Aggregate functions within a VQL function have their own state: SELECT Adder(X=4), Adder(X=2) FROM scope()": [
    {
      "Adder(X=4)": [
        {
          "value": 10,
          "Count": 1
        },
        {
          "value": 11,
          "Count": 2
        },
        {
          "value": 12,
          "Count": 3
        },
        {
          "value": 13,
          "Count": 4
        },
        {
          "value": 14,
          "Count": 5
        }
      ],
      "Adder(X=2)": [
        {
          "value": 10,
          "Count": 1
        },
        {
          "value": 11,
          "Count": 2
        },
        {
          "value": 12,
          "Count": 3
        }
      ]
    }
  ],
  "040/000 Aggregate functions within a VQL function have their own state: LET Adder(X) = SELECT *, count() AS Count FROM range(start=10, end=10 + X, step=1)": null,
  "040/001 Aggregate functions within a VQL function have their own state: SELECT * FROM foreach(row={ SELECT value FROM range(start=0, end=2, step=1) }, query={ SELECT * FROM Adder(X=value) })": [
    {
      "value": 10,
      "Count": 1
    },
    {
      "value": 10,
      "Count": 1
    },
    {
      "value": 11,
      "Count": 2
    },
    {
      "value": 10,
      "Count": 1
    },
    {
      "value": 11,
      "Count": 2
    },
    {
      "value": 12,
      "Count": 3
    }
  ],
  "041/000 Aggregate functions: Sum and Count together: LET MyValue \u003c= \"Hello\"": null,
  "041/001 Aggregate functions: Sum and Count together: SELECT * FROM foreach(row=[2, 3, 4], query={ SELECT count() AS Count, sum(item=_value) AS Sum, MyValue FROM scope() })": [
    {
      "Count": 1,
      "Sum": 2,
      "MyValue": "Hello"
    },
    {
      "Count": 2,
      "Sum": 5,
      "MyValue": "Hello"
    },
    {
      "Count": 3,
      "Sum": 9,
      "MyValue": "Hello"
    }
  ],
  "042/000 Aggregate functions: Sum and Count in stored query definition: LET MyValue \u003c= \"Hello\"": null,
  "042/001 Aggregate functions: Sum and Count in stored query definition: LET CountMe(Value) = SELECT count() AS Count, Value, sum(item=Value) AS Sum, MyValue FROM scope()": null,
  "042/002 Aggregate functions: Sum and Count in stored query definition: LET _value = 10": null,
  "042/003 Aggregate functions: Sum and Count in stored query definition: SELECT * FROM foreach(row=[2, 3, 4], query={ SELECT * FROM CountMe(Value=_value) })": [
    {
      "Count": 1,
      "Value": 2,
      "Sum": 2,
      "MyValue": "Hello"
    },
    {
      "Count": 1,
      "Value": 3,
      "Sum": 3,
      "MyValue": "Hello"
    },
    {
      "Count": 1,
      "Value": 4,
      "Sum": 4,
      "MyValue": "Hello"
    }
  ],
  "043/000 Aggregate functions: Sum and Count in stored query definition: LET MyValue \u003c= \"Hello\"": null,
  "043/001 Aggregate functions: Sum and Count in stored query definition: LET CountMe(Value) = SELECT count() AS Count, Value, sum(item=Value) AS Sum, MyValue FROM scope()": null,
  "043/002 Aggregate functions: Sum and Count in stored query definition: LET _value = 10": null,
  "043/003 Aggregate functions: Sum and Count in stored query definition: SELECT * FROM foreach(row=[2, 3, 4], query=CountMe(Value=_value))": [
    {
      "Count": 1,
      "Value": 10,
      "Sum": 10,
      "MyValue": "Hello"
    },
    {
      "Count": 2,
      "Value": 10,
      "Sum": 20,
      "MyValue": "Hello"
    },
    {
      "Count": 3,
      "Value": 10,
      "Sum": 30,
      "MyValue": "Hello"
    }
  ],
  "044/000 Aggregate functions: Sum all rows: SELECT sum(item=_value) AS Total, sum(item=_value * 2) AS TotalDouble FROM foreach(row=[2, 3, 4]) GROUP BY 1": [
    {
      "Total": 9,
      "TotalDouble": 18
    }
  ],
  "045/000 If function with stored query: LET Foo = SELECT 2 FROM scope() WHERE set_env(column=\"Eval\", value=TRUE)": null,
  "045/001 If function with stored query: LET result \u003c= if(condition=TRUE, then=Foo)": null,
  "045/002 If function with stored query: SELECT RootEnv.Eval AS Pass FROM scope()": [
    {
      "Pass": true
    }
  ],
  "046/000 If function with subqueries: LET abc(a) = if(condition=a, then={ SELECT a AS Pass FROM scope() }, else={ SELECT false AS Pass FROM scope() })": null,
  "046/001 If function with subqueries: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": null
        }
      ]
    }
  ],
  "047/000 If function with subqueries should return a lazy query: LET _ \u003c= SELECT * FROM reset_objectwithmethods()": null,
  "047/001 If function with subqueries should return a lazy query: LET MyCounter(Length) = SELECT * FROM foreach(row={ SELECT value FROM range(start=0, end=Length, step=1) }, query={ SELECT Value2 FROM objectwithmethods() WHERE Value2 })": null,
  "047/002 If function with subqueries should return a lazy query: SELECT * FROM if(condition=TRUE, then=if(condition=TRUE, then=MyCounter(Length=1000))) LIMIT 3 ": [
    {
      "Value2": "I am a method, called 1"
    },
    {
      "Value2": "I am a method, called 2"
    },
    {
      "Value2": "I am a method, called 3"
    }
  ],
  "047/003 If function with subqueries should return a lazy query: SELECT * FROM if(condition=TRUE, then=if(condition=TRUE, then={ SELECT VarIsObjectWithMethods.Counter \u003c 20, Value2 =~ \"called\" FROM MyCounter(Length=100) })) LIMIT 3 ": [
    {
      "VarIsObjectWithMethods.Counter \u003c 20": true,
      "Value2 =~ \"called\"": true
    },
    {
      "VarIsObjectWithMethods.Counter \u003c 20": true,
      "Value2 =~ \"called\"": true
    },
    {
      "VarIsObjectWithMethods.Counter \u003c 20": true,
      "Value2 =~ \"called\"": true
    }
  ],
  "047/004 If function with subqueries should return a lazy query: SELECT Counter \u003c 20 FROM objectwithmethods() LIMIT 1 ": [
    {
      "Counter \u003c 20": true
    }
  ],
  "048/000 If function with functions: LET abc(a) = if(condition=a, then=set_env(column=\"EvalFunc\", value=TRUE))": null,
  "048/001 If function with functions: LET _ \u003c= SELECT abc(a=TRUE) FROM scope()": null,
  "048/002 If function with functions: SELECT RootEnv.EvalFunc AS Pass FROM scope()": [
    {
      "Pass": true
    }
  ],
  "049/000 If function with conditions as subqueries: LET abc(a) = if(condition={ SELECT * FROM scope() }, then={ SELECT a AS Pass FROM scope() }, else={ SELECT false AS Pass FROM scope() })": null,
  "049/001 If function with conditions as subqueries: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": null
        }
      ]
    }
  ],
  "050/000 If function with conditions as stored query: LET stored_query = SELECT * FROM scope()": null,
  "050/001 If function with conditions as stored query: LET abc(a) = if(condition=stored_query, then={ SELECT a AS Pass FROM scope() }, else={ SELECT false AS Pass FROM scope() })": null,
  "050/002 If function with conditions as stored query: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": null
        }
      ]
    }
  ],
  "051/000 If function with conditions as vql functions: LET adder(a) = a =~ \"Foo\"": null,
  "051/001 If function with conditions as vql functions: LET abc(a) = if(condition=adder(a=\"Foobar\"), then={ SELECT a AS Pass FROM scope() }, else={ SELECT false AS Pass FROM scope() })": null,
  "051/002 If function with conditions as vql functions: SELECT abc(a=TRUE) AS Pass FROM scope()": [
    {
      "Pass": [
        {
          "Pass": null
        }
      ]
    }
  ],
  "052/000 Multiline string constants: LET X = '''This\nis\na\nmultiline with 'quotes' and \"double quotes\" and \\ backslashes\n''' + \"A string\"": null,
  "052/001 Multiline string constants: SELECT X FROM scope()": [
    {
      "X": "This\nis\na\nmultiline with 'quotes' and \"double quotes\" and \\ backslashes\nA string"
    }
  ],
  "053/000 Early breakout of foreach with infinite row query: SELECT * FROM foreach(row={ SELECT count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=5) }, query={ SELECT Count FROM scope() }) LIMIT 1 ": [
    {
      "Count": 1
    }
  ],
  "054/000 Early breakout of foreach with stored query: LET X = SELECT count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=6)": null,
  "054/001 Early breakout of foreach with stored query: SELECT * FROM foreach(row=X, query={ SELECT Count FROM scope() }) LIMIT 1 ": [
    {
      "Count": 1
    }
  ],
  "055/000 Early breakout of foreach with stored query with parameters: LET X(Y) = SELECT Y, count() AS Count FROM range(start=1, end=20) WHERE panic(column=Count, value=7)": null,
  "055/001 Early breakout of foreach with stored query with parameters: SELECT * FROM foreach(row=X(Y=23), query={ SELECT Y, Count FROM scope() }) LIMIT 1 ": [
    {
      "Y": 23,
      "Count": 1
    }
  ],
  "056/000 Expand stored query with parameters on associative: LET X(Y) = SELECT Y + 5 + value AS Foo FROM range(start=1, end=2)": null,
  "056/001 Expand stored query with parameters on associative: SELECT X(Y=2).Foo FROM scope()": [
    {
      "X(Y=2).Foo": [
        8,
        9
      ]
    }
  ],
  "057/000 Order by: SELECT * FROM foreach(row=(1, 8, 3, 2), query={ SELECT _value AS X FROM scope() }) ORDER BY X": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    },
    {
      "X": 8
    }
  ],
  "058/000 Group by also orders: SELECT * FROM foreach(row=(1, 1, 1, 1, 8, 3, 3, 3, 2), query={ SELECT _value AS X FROM scope() }) GROUP BY X": [
    {
      "X": 1
    },
    {
      "X": 8
    },
    {
      "X": 3
    },
    {
      "X": 2
    }
  ],
  "059/000 Group by with explicit order by: SELECT * FROM foreach(row=(1, 1, 1, 1, 8, 3, 3, 3, 2), query={ SELECT _value AS X, 10 - _value AS Y FROM scope() }) GROUP BY X ORDER BY Y": [
    {
      "X": 8,
      "Y": 2
    },
    {
      "X": 3,
      "Y": 7
    },
    {
      "X": 2,
      "Y": 8
    },
    {
      "X": 1,
      "Y": 9
    }
  ],
  "060/000 Test array index: LET BIN \u003c= SELECT * FROM test()": null,
  "060/001 Test array index: SELECT BIN, BIN[0] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[0]": {
        "foo": 0,
        "bar": 0
      }
    }
  ],
  "061/000 Test array index with expression: LET Index(X) = X - 1": null,
  "061/001 Test array index with expression: LET BIN \u003c= SELECT * FROM test()": null,
  "061/002 Test array index with expression: SELECT BIN, BIN[Index(X=2)] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[Index(X=2)]": {
        "foo": 2,
        "bar": 1
      }
    }
  ],
  "061/003 Test array index with expression: SELECT BIN, BIN[Index(X=0)] FROM scope()": [
    {
      "BIN": [
        {
          "foo": 0,
          "bar": 0
        },
        {
          "foo": 2,
          "bar": 1
        },
        {
          "foo": 4,
          "bar": 2
        }
      ],
      "BIN[Index(X=0)]": {
        "foo": 4,
        "bar": 2
      }
    }
  ],
  "062/000 Create Let expression: LET result = SELECT * FROM test()": null,
  "062/001 Create Let expression: LET result \u003c= SELECT * FROM test()": null,
  "062/002 Create Let expression: SELECT * FROM result": [
    {
      "foo": 0,
      "bar": 0
    },
    {
      "foo": 2,
      "bar": 1
    },
    {
      "foo": 4,
      "bar": 2
    }
  ],
  "062/003 Create Let expression: SELECT * FROM no_such_result": null,
  "062/004 Create Let expression: SELECT foobar FROM no_such_result": null,
  "063/000 Override function with a variable: LET format = 5": null,
  "063/001 Override function with a variable: SELECT format, format(format='%v', args=1) AS A FROM scope()": [
    {
      "format": 5,
      "A": "1"
    }
  ],
  "064/000 Stored Expressions as plugins: LET Foo = (dict(X=1), dict(X=2), dict(X=3))": null,
  "064/001 Stored Expressions as plugins: SELECT * FROM Foo": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    }
  ],
  "065/000 Materialized Expressions as plugins: LET Foo \u003c= (dict(X=1), dict(X=2), dict(X=3))": null,
  "065/001 Materialized Expressions as plugins: SELECT * FROM Foo": [
    {
      "X": 1
    },
    {
      "X": 2
    },
    {
      "X": 3
    }
  ],
  "066/000 Stored Expressions as plugins with args: LET Foo(X) = (dict(X=1 + X), dict(X=2 + X), dict(X=3 + X))": null,
  "066/001 Stored Expressions as plugins with args: SELECT * FROM Foo(X=1)": [
    {
      "X": 2
    },
    {
      "X": 3
    },
    {
      "X": 4
    }
  ],
  "067/000 Slice Range: LET X \u003c= (0, 1, 2, 3, 4, 5, 6, 7)": null,
  "067/001 Slice Range: SELECT X[2:], X[2:4], X[:2], X[-1], X[-2], X[-2:], X[2:-1] FROM scope()": [
    {
      "X[2:]": [
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "X[2:4]": [
        2,
        3
      ],
      "X[:2]": [
        0,
        1
      ],
      "X[-1]": 7,
      "X[-2]": 6,
      "X[-2:]": [
        6,
        7
      ],
      "X[2:-1]": [
        2,
        3,
        4,
        5,
        6
      ]
    }
  ],
  "068/000 Slice Strings: LET X = \"Hello World\"": null,
  "068/001 Slice Strings: SELECT X[1:5], X[-5:], X[:5], X[5:2], X[5:5] FROM scope()": [
    {
      "X[1:5]": "ello",
      "X[-5:]": "World",
      "X[:5]": "Hello",
      "X[5:2]": "",
      "X[5:5]": ""
    }
  ],
  "069/000 Slice Strings Binary: LET X = \"\\x00\\xff\\xfe\\xfc\\xd0\\x01\"": null,
  "069/001 Slice Strings Binary: SELECT X[1], X[2], format(format=\"%02x\", args=X[2:5]), X[5:2], X[2:2] FROM scope()": [
    {
      "X[1]": 255,
      "X[2]": 254,
      "format(format=\"%02x\", args=X[2:5])": "fefcd0",
      "X[5:2]": "",
      "X[2:2]": ""
    }
  ],
  "070/000 Access object methods as properties.: LET _ \u003c= SELECT * FROM reset_objectwithmethods()": null,
  "070/001 Access object methods as properties.: SELECT * FROM objectwithmethods()": [
    {
      "Value1": 1,
      "Value2": "I am a method, called 1",
      "Counter": 1
    },
    {
      "Value1": 2,
      "Value2": "I am a method, called 2",
      "Counter": 2
    }
  ],
  "070/002 Access object methods as properties.: SELECT Value1, Value2 + \"X\" FROM objectwithmethods()": [
    {
      "Value1": 1,
      "Value2 + \"X\"": "I am a method, called 3X"
    },
    {
      "Value1": 2,
      "Value2 + \"X\"": "I am a method, called 4X"
    }
  ],
  "070/003 Access object methods as properties.: SELECT Value1 FROM objectwithmethods()": [
    {
      "Value1": 1
    },
    {
      "Value1": 2
    }
  ],
  "070/004 Access object methods as properties.: SELECT Value2 + \"X\" FROM objectwithmethods() WHERE False": null,
  "070/005 Access object methods as properties.: SELECT if(condition=1, then=2, else=Value2) FROM objectwithmethods()": [
    {
      "if(condition=1, then=2, else=Value2)": 2
    },
    {
      "if(condition=1, then=2, else=Value2)": 2
    }
  ],
  "070/006 Access object methods as properties.: SELECT Value2 FROM objectwithmethods() WHERE Value2 =~ \"method\"": [
    {
      "Value2": "I am a method, called 5"
    },
    {
      "Value2": "I am a method, called 6"
    }
  ],
  "071/000 Access object methods as properties: LET _ \u003c= SELECT * FROM reset_objectwithmethods()": null,
  "071/001 Access object methods as properties: SELECT VarIsObjectWithMethods.Value1 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value1": 1
    }
  ],
  "071/002 Access object methods as properties: SELECT VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value2": "I am a method, called 1"
    }
  ],
  "071/003 Access object methods as properties: SELECT VarIsObjectWithMethods.Value1 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value1": 1
    }
  ],
  "071/004 Access object methods as properties: SELECT if(condition=1, then=2, else=VarIsObjectWithMethods.Value2) FROM scope()": [
    {
      "if(condition=1, then=2, else=VarIsObjectWithMethods.Value2)": 2
    }
  ],
  "071/005 Access object methods as properties: SELECT VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "VarIsObjectWithMethods.Value2": "I am a method, called 2"
    }
  ],
  "071/006 Access object methods as properties: SELECT if(condition=FALSE, then=2, else=VarIsObjectWithMethods.Value2) + \"X\", VarIsObjectWithMethods.Value2 =~ \"I am a method\", VarIsObjectWithMethods.Value2 FROM scope()": [
    {
      "if(condition=FALSE, then=2, else=VarIsObjectWithMethods.Value2) + \"X\"": "I am a method, called 3X",
      "VarIsObjectWithMethods.Value2 =~ \"I am a method\"": true,
      "VarIsObjectWithMethods.Value2": "I am a method, called 5"
    }
  ],
  "072/000 VQL Functions can access global scope: LET Foo = \"Hello\"": null,
  "072/001 VQL Functions can access global scope: LET MyFunc(X) = SELECT X, Foo FROM scope()": null,
  "072/002 VQL Functions can access global scope: SELECT * FROM MyFunc(X=1)": [
    {
      "X": 1,
      "Foo": "Hello"
    }
  ],
  "073/000 Function returning array: SELECT func_foo(return=ArrayValue) FROM scope()": [
    {
      "func_foo(return=ArrayValue)": [
        1,
        2,
        3
      ]
    }
  ],
  "074/000 If function with stored query: LET FooBar = SELECT \"A\" FROM scope()": null,
  "074/001 If function with stored query: LET B = SELECT if(condition=TRUE, then=FooBar) AS Item FROM scope()": null,
  "074/002 If function with stored query: SELECT B, FooBar FROM scope()": [
    {
      "B": [
        {
          "Item": [
            {
              "\"A\"": "A"
            }
          ]
        }
      ],
      "FooBar": [
        {
          "\"A\"": "A"
        }
      ]
    }
  ],
  "075/000 Explain query: EXPLAIN SELECT \"A\" FROM scope()": [
    {
      "\"A\"": "A"
    }
  ],
  "076/000 Flatten query: SELECT * FROM flatten(query={ SELECT 1 AS A, (1, 2) AS B FROM scope() })": [
    {
      "A": 1,
      "B": 1
    },
    {
      "A": 1,
      "B": 2
    }
  ],
  "077/000 Flatten query cartesian with 2 lists: SELECT * FROM flatten(query={ SELECT (3, 4) AS A, (1, 2) AS B FROM scope() })": [
    {
      "A": 3,
      "B": 1
    },
    {
      "A": 4,
      "B": 1
    },
    {
      "A": 3,
      "B": 2
    },
    {
      "A": 4,
      "B": 2
    }
  ],
  "078/000 Flatten query empty list: LET FOO \u003c= SELECT * FROM scope() WHERE FALSE": null,
  "078/001 Flatten query empty list: SELECT * FROM flatten(query={ SELECT 1 AS A, FOO, (1, 2) AS B FROM scope() })": [
    {
      "A": 1,
      "FOO": [],
      "B": 1
    },
    {
      "A": 1,
      "FOO": [],
      "B": 2
    }
  ],
  "079/000 Flatten dict query: SELECT * FROM flatten(query={ SELECT 1 AS A, dict(E=1, F=2) AS B FROM scope() })": [
    {
      "A": 1,
      "B": {
        "E": 1,
        "F": 2
      }
    }
  ],
  "080/000 Flatten subquery: SELECT * FROM flatten(query={ SELECT *, { SELECT * FROM range(start=1, end=3) } AS Count FROM foreach(row=[dict(A=1)]) })": [
    {
      "A": 1,
      "Count": 1
    },
    {
      "A": 1,
      "Count": 2
    },
    {
      "A": 1,
      "Count": 3
    }
  ],
  "081/000 Flatten stored query: LET SQ = SELECT * FROM range(start=1, end=3)": null,
  "081/001 Flatten stored query: SELECT * FROM flatten(query={ SELECT *, SQ FROM foreach(row=[dict(A=1)]) })": [
    {
      "A": 1,
      "SQ": {
        "value": 1
      }
    },
    {
      "A": 1,
      "SQ": {
        "value": 2
      }
    },
    {
      "A": 1,
      "SQ": {
        "value": 3
      }
    }
  ],
  "082/000 Foreach query with multiple count(): SELECT * FROM foreach(row={ SELECT count() AS RowCount FROM range(start=1, end=3) }, query={ SELECT RowCount, count() AS QueryCount FROM range(start=1, step=1, end=3) })": [
    {
      "RowCount": 1,
      "QueryCount": 1
    },
    {
      "RowCount": 1,
      "QueryCount": 2
    },
    {
      "RowCount": 1,
      "QueryCount": 3
    },
    {
      "RowCount": 2,
      "QueryCount": 4
    },
    {
      "RowCount": 2,
      "QueryCount": 5
    },
    {
      "RowCount": 2,
      "QueryCount": 6
    },
    {
      "RowCount": 3,
      "QueryCount": 7
    },
    {
      "RowCount": 3,
      "QueryCount": 8
    },
    {
      "RowCount": 3,
      "QueryCount": 9
    }
  ],
  "083/000 Calling stored query with aggregators: LET Counter(Start) = SELECT count() AS Count, Start FROM range(start=1, step=1, end=3)": null,
  "083/001 Calling stored query with aggregators: SELECT * FROM foreach(row={ SELECT count() AS RowCount FROM range(start=1, end=3) }, query={ SELECT * FROM Counter(Start=RowCount) })": [
    {
      "Count": 1,
      "Start": 1
    },
    {
      "Count": 2,
      "Start": 1
    },
    {
      "Count": 3,
      "Start": 1
    },
    {
      "Count": 1,
      "Start": 2
    },
    {
      "Count": 2,
      "Start": 2
    },
    {
      "Count": 3,
      "Start": 2
    },
    {
      "Count": 1,
      "Start": 3
    },
    {
      "Count": 2,
      "Start": 3
    },
    {
      "Count": 3,
      "Start": 3
    }
  ]
}